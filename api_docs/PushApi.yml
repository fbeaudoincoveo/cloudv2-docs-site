---
  info: 
    version: "1.0"
    title: "Push API Reference - Coveo Cloud V2"
    description: |
      The Push API allows you to *push* items and permissions to a Coveo Cloud V2 index, rather than *pulling* content
      using standard Coveo connectors and crawlers.

      This is especially useful when you need to index content from a cloud or on-premises system for which the
      Coveo Cloud V2 platform offers no source type.
  paths: 
    /organizations/{organizationId}/sources/{sourceId}/status: 
      post: 
        responses: 
          201:
            description: "Created"
            examples:
              application/json:
                {}
          400:
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          429:
            $ref: "#/responses/429"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          - 
            required: true
            type: "string"
            enum:
              - "REBUILD"
              - "REFRESH"
              - "INCREMENTAL"
              - "IDLE"
            description: |
              The status to set the Push source to.

              **Sample value:**
              `"REBUILD"`
            name: "statusType"
            in: "query"
          -
            $ref: "#/parameters/SourceId"
          -
            $ref: "#/parameters/OrganizationId"
        tags: 
          - "Source"
        produces: 
          - "application/json"
        x-pretty-name: "setSourceStatus"
        operationId: "setSourceStatus"
        summary: "Set source status"
        description: |
          Sets the current status of a Coveo Cloud V2 Push source. This allows you to keep the activity log of the Push
          source up-to-date.

          Before adding, updating, or deleting items in a Push source, you should set its status to either `REBUILD`,
          `REFRESH`, or `INCREMENTAL`, depending on the scale of the update. You should then set its status back to
          `IDLE` when the update process is over.

          Pushing an "active" source status creates an activity. Pusing the `IDLE` status terminates the ongoing
          activity and marks it as completed.

          **Request example:**
          ```http
          POST /v1/organizations/myorganizationid/sources/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/status?statusType=REBUILD
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```

          **Note:**
          > If you wish to get the activity logs of your source, you must use the
          > [Activity API](Activity#operation/getAllPublicActivitiesForOrganizationUsingPOST).
        security: 
          - 
            oauth2: 
              - "full"
    /organizations/{organizationId}/sources/{sourceId}/documents/olderthan: 
      delete: 
        responses: 
          202: 
            headers:
            description: "Accepted"
            examples:
              application/json:
                {}
          400: 
            $ref: "#/responses/400"
          401: 
            $ref: "#/responses/401"
          403: 
            $ref: "#/responses/403"
          404: 
            $ref: "#/responses/404"
          412: 
            $ref: "#/responses/412"
          415: 
            $ref: "#/responses/415"
          500: 
            $ref: "#/responses/500"
          504: 
            $ref: "#/responses/504"
        parameters: 
          -
            $ref: "#/parameters/SourceId"
          - 
            required: true
            type: "integer"
            format: "int64"
            description: |
              The unique identifier which determines whether to delete an item. Any item in the Push source whose
              `orderingId` is older (lesser) than this value will be deleted.

              **Sample value:**
              > `1497448742564`
            name: "orderingId"
            in: "query"
          -
            type: "int"
            format: "int32"
            minimum: 0
            description: |
              A grace period (in minutes) to ensure that all items remaining in the document processing manager (DPM)
              have been added to the Push source before actually starting the deleting process. This prevents deleted
              items from inadvertently reappearing in the Push source if they were also being processed by the DPM
              (because of a `REFRESH` operation, for instance).

              **Sample value:**
              > `20`
            name: "queueDelay"
            in: "query"
            default: 15
          -
            $ref: "#/parameters/OrganizationId"
        produces: 
          - "application/json"
        tags: 
          - "Item"
        x-pretty-name: "deleteDocumentsOlderThan"
        operationId: "deleteDocumentsOlderThan"
        summary: "Delete items older than value"
        description: |
          Deletes all items whose `orderingId` is older (lesser) than the specified value. You should normally use
          this method to clean-up deleted items at the end of a `REBUILD` operation.

          **Request example:**
          ```http
          DELETE /v1/organizations/myorganizationid/sources/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/documents/olderthan?orderingId=1497448742564&queueDelay=20
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
    /organizations/{organizationId}/sources/{sourceId}/documents/batch: 
      put: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400: 
            $ref: "#/responses/400"
          401: 
            $ref: "#/responses/401"
          403: 
            $ref: "#/responses/403"
          404: 
            $ref: "#/responses/404"
          412: 
            $ref: "#/responses/412"
          415: 
            $ref: "#/responses/415"
          500: 
            $ref: "#/responses/500"
          504: 
            $ref: "#/responses/504"
        parameters: 
          -
            $ref: "#/parameters/OptionalOrderingId"
          -
            $ref: "#/parameters/SourceId"
          -
            $ref: "#/parameters/FileId"
          -
            $ref: "#/parameters/OrganizationId"
        produces: 
          - "application/json"
        tags:
          - "Item"
        x-pretty-name: "addUpdateDeleteBatchedDocument"
        operationId: "addUpdateDeleteBatchedDocument"
        summary: "Add, update, and/or delete batch of items"
        description: |
          Adds, updates, and/or deletes a large number of encrypted items in a Coveo Cloud V2 Push source, with a single
          request.

          **Request example:**
          ```http
            PUT /v1/organizations/myorganizationid/sources/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/documents/batch?fileId=d22778ca-7f42-4e13-9d9a-47d01bce866c
            Host: push.cloud.coveo.com
            Content-Type: application/json
            Authorization: Bearer MyOAuth2Token
          ```

          ### Using this Method

          Before using this method, you need to perform the following steps:

          1. Get an access to a private, encrypted Amazon S3 file container using the
          [Get large file container](PushApi#operation/getPresignedUploadUrl) method.

          2. Send a `PUT` request to the `uploadUri` you got at step 1.

          Your request must contain the following headers:

          ```http
          Content-Type: application/octet-stream
          x-amz-server-side-encryption: AES256
          ```

          The body of your request should look like:

          ```json
          {
            "AddOrUpdate": [
              {
                "DocumentId": "http://www.coveo.com/",

                [ ... ]
              },

              [ ... ]
            ],

            "Delete": [
              {
                "DocumentId": "http://www.example.com/"
              },

              [ ... ]
            ]
          }
          ```

          **Note:**
          > * The `AddOrUpdate` attribute is an array of `DocumentBody`. This is the same model you would use in the
          > body of a call to the [Add or update single item](PushApi#operation/addUpdateDocument) method. This means
          > you can add or update compressed or uncompressed data, permission sets, etc. As the name of this attribute
          > implies, all elements in the `AddOrUpdate` array will be added (or updated) in the target Push source.

          > * The `Delete` attribute also is an array of `DocumentBody`. However, all elements in this array will be
          > deleted from the target Push source. When you wish to remove items from a Push source, you only need to
          > specify the `DocumentId` (URI) of each of those items.
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
    /organizations/{organizationId}/providers/{providerId}/permissions: 
      put: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400: 
            $ref: "#/responses/400"
          401: 
            $ref: "#/responses/401"
          403: 
            $ref: "#/responses/403"
          404: 
            $ref: "#/responses/404"
          412: 
            $ref: "#/responses/412"
          415: 
            $ref: "#/responses/415"
          500: 
            $ref: "#/responses/500"
          504: 
            $ref: "#/responses/504"
        parameters: 
          -
            $ref: "#/parameters/ProviderId"
          - 
            $ref: "#/parameters/OrganizationId"
          - 
            $ref: "#/parameters/OptionalOrderingId"
          - 
            schema: 
              $ref: "#/definitions/IdentityBody"
            required: true
            description: |
              The security identity to add or update.
            name: "IdentityBody"
            in: "body"
        produces: 
          - "application/json"
        tags: 
          - "Identity"
        x-pretty-name: "addUpdateIdentity"
        operationId: "addUpdateIdentity"
        summary: "Add or update identity"
        description: |
          Adds or updates a single security identity in a Coveo Cloud V2 security identity provider.

          **Request example:**
          ```http
            PUT /v1/organizations/myorganizationid/providers/MyPushSourceSecurityIdentitiyProvider/permissions
            Host: push.cloud.coveo.com
            Content-Type: application/json
            Authorization: Bearer MyOAuth2Token
          ```
          ```json
          {
            "WellKnowns": [
              {
                "AdditionalInfo": {},
                "Type": "VIRTUAL_GROUP",
                "Name": "My_Security_Identity_Role"
              }
            ],
            "Members": [
              {
                "AdditionalInfo": {},
                "Type": "USER",
                "Name": "user1"
              },
              {
                "AdditionalInfo": {},
                "Type": "USER",
                "Name": "user2"
              }
            ],
            "Identity": {
              "AdditionalInfo": {},
              "Type": "GROUP",
              "Name": "My_Group"
            }
          }
          ```
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
      delete: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400: 
            $ref: "#/responses/400"
          401: 
            $ref: "#/responses/401"
          403: 
            $ref: "#/responses/403"
          404: 
            $ref: "#/responses/404"
          412: 
            $ref: "#/responses/412"
          415: 
            $ref: "#/responses/415"
          500: 
            $ref: "#/responses/500"
          504: 
            $ref: "#/responses/504"
        parameters: 
          - 
            $ref: "#/parameters/ProviderId"
          - 
            $ref: "#/parameters/OrganizationId"
          - 
            $ref: "#/parameters/OptionalOrderingId"
          - 
            schema: 
              $ref: "#/definitions/BaseIdentityBody"
            required: true
            description: |
              The security identity to delete.
            name: "BaseIdentityBody"
            in: "body"
        produces: 
          - "application/json"
        tags: 
          - "Identity"
        x-pretty-name: "deleteIdentity"
        operationId: "deleteIdentity"
        summary: "Delete identity"
        description: |
          Deletes a single security identity from a Coveo Cloud V2 security identity provider.

          **Request example:**
          ```http
          DELETE /v1/organizations/myorganizationid/providers/MyPushSourceSecurityIdentitiyProvider/permissions
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```
          ```json
          {
            "AdditionalInfo": {},
            "Type": "USER",
            "Name": "user_to_delete"
          }
          ```
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
    /organizations/{organizationId}/files: 
      post: 
        responses: 
          201:
            description: "Created"
            schema:
              $ref: "#/definitions/PresignedUploadUrl"
          400: 
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          - 
            $ref: "#/parameters/OrganizationId"
        tags: 
          - "File"
        produces: 
          - "application/json"
        x-pretty-name: "getPresignedUploadUrl"
        operationId: "getPresignedUploadUrl"
        summary: "Get large file container"
        description: |
          Gets a presigned Amazon S3 `uploadUri`, as well as a unique `fileId`.

          The `uploadUri` grants you access to a private, encrypted Amazon S3 file container where you can safely push
          content. Once your items have been indexed, the S3 file container is automatically deleted.

          **Note:**
          > The `uploadUri` expires after 60 minutes.

          This method is useful when you need to push a single large item (5 MB or more), or a batch of items and/or
          permissions.

          **Request example:**
          ```http
            POST /v1/organizations/myorganizationid/files
            Host: push.cloud.coveo.com
            Content-Type: application/json
            Authorization: Bearer MyOAuth2Token
          ```
        security: 
          - 
            oauth2: 
              - "full"
    /organizations/{organizationId}/providers/{providerId}/permissions/batch: 
      put: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400:
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          - 
            $ref: "#/parameters/ProviderId"
          - 
            $ref: "#/parameters/FileId"
          - 
            $ref: "#/parameters/OrganizationId"
          - 
            $ref: "#/parameters/OptionalOrderingId"
        produces: 
          - "application/json"
        tags: 
          - "Identity"
        x-pretty-name: "addUpdateDeleteBatchedIdentity"
        operationId: "addUpdateDeleteBatchedIdentity"
        summary: "Add, update, and/or delete a batch of identities"
        description: |
          Adds, updates, and/or deletes a large number of identities in a Coveo Cloud V2 security identity provider,
          with a single request.


          **Request example:**
          ```http
          POST /v1/organizations/myorganizationid/providers/myproviderid/permissions/batch?fileId=d22778ca-7f42-4e13-9d9a-47d01bce866c
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```

          ### Using this Method

          Before using this method, you need to perform the following steps:

          1. Get an access to a private, encrypted Amazon S3 file container using the
          [Get large file container](PushApi#operation/getPresignedUploadUrl) method.

          2. Send a `PUT` request to the `uploadUri` you got at step 1.

          Your request must contain the following headers:

          ```http
          Content-Type: application/octet-stream
          x-amz-server-side-encryption: AES256
          ```

          The body of your request should look like this:

          ```json
          {
            "Members": [
              {
                "Identity": {
                  "AdditionalInfo": {},
                  "Type": "GROUP",
                  "Name": "My_Group"
                },
                "Members": {
                  {
                    "AdditionalInfo": {},
                    "Type": "USER",
                    "Name": "user1"
                  },
                  {
                    "AdditionalInfo": {},
                    "Type": "USER",
                    "Name": "user2"
                  }
                },
                "WellKnowns": [
                  {
                    "AdditionalInfo": {},
                    "Type": "GROUP",
                    "Name": "My_Security_Identity_Role"
                  }
                ]
              }
            ],
            "Mappings": [
              {
                "Identity": {
                  "AdditionalInfo": {},
                  "Type": "GROUP",
                  "Name": "My_Group"
                },
                "Mappings": [
                  {
                    "AdditionalInfo": {},
                    "Type": "GROUP",
                    "Name": "My_Group",
                    "Provider": "Email Security Provider"
                  }
                ],
                "WellKnowns": [
                  {
                    "AdditionalInfo": {},
                    "Type": "USER",
                    "Name": "user1@example.com"
                  },
                  {
                    "AdditionalInfo": {},
                    "Type": "USER",
                    "Name": "user2@example.com"
                  },
                ]
              }
            ],
            "Deleted": [
              {
                "Identity": {
                  "AdditionalInfo": {},
                  "Type": "USER",
                  "Name": "user_to_delete@example.com"
                }
              }
            ]
          }
          ```

          3. Use this method to add, update, and/or delete security identities in the Coveo Cloud V2 security identity
          provider. Use the `fileId` value you got at step 1 as the `fileId` as the corresponding query parameter value.
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
    /organizations/{organizationId}/providers/{providerId}/permissions/olderthan: 
      delete: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400:
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          - 
            $ref: "#/parameters/ProviderId"
          - 
            $ref: "#/parameters/OrganizationId"
          - 
            required: true
            type: "string"
            description: |
              The unique identifier which determines whether to delete a security identity. Any identity in the security
              identity provider whose `orderingId` is older (lesser) than this value will be deleted.

              **Sample value:**
              > `1497448742564`
            name: "orderingId"
            in: "query"
        tags: 
          - "Identity"
        produces: 
          - "application/json"
        x-pretty-name: "deleteIdentityOlderThan"
        operationId: "deleteIdentityOlderThan"
        summary: "Delete identities older than specified value"
        description: |
          Deletes all identities which are older than the specified ordering ID from a Coveo Cloud V2 security identity
          provider.

          **Request example:**

          ```http
          POST /v1/organizations/myorganizationid/providers/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/permissions/olderthan?orderingId=1497448742564
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```
        security: 
          - 
            oauth2: 
              - "full"
    /organizations/{organizationId}/providers/{providerId}/mappings: 
      put: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400:
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          -
            $ref: "#/parameters/ProviderId"
          -
            $ref: "#/parameters/OrganizationId"
          - 
            $ref: "#/parameters/OptionalOrderingId"
          - 
            schema: 
              $ref: "#/definitions/MappedIdentityBody"
            required: true
            description: |
              The identity to map and its mapping.
            name: "MappedIdentityBody"
            in: "body"
        tags: 
          - "Identity"
        x-pretty-name: "addUpdateMappedIdentity"
        operationId: "addUpdateMappedIdentity"
        summary: "Add or update single mapped identity"
        description: |
          Adds or updates a single mapped security identity in a Coveo Cloud V2 security identity provider.

          **Request example:**
          ```http
          POST /v1/organizations/myorganizationid/providers/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/mappings
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```

          ```json
          {
            "Identity": {
              "Type": "USER",
              "Name": "user1"
            },
            "Mappings": [
              {
                "Type": "USER",
                "Name": "user1@example.com",
                "Provider": "Email Security Provider"
              }
            ]
          }
          ```
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
    /organizations/{organizationId}/sources/{sourceId}/documents: 
      put: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400:
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          - 
            $ref: "#/parameters/OptionalOrderingId"
          -
            $ref: "#/parameters/SourceId"
          -
            $ref: "#/parameters/DocumentId"
          -
            $ref: "#/parameters/OrganizationId"
          - 
            required: false
            type: "string"
            name: "compressionType"
            description: |
              The type of compression.

              **Sample value:**
              > `"gzip"`
            in: "query"
          - 
            schema: 
              $ref: "#/definitions/DocumentBody"
            required: true
            description: |
              The data structure to push.

              You can add as many metadata key-value pairs as you need in `DocumentBody`. A metadata value can be
              of any primitive type (string, number, or boolean). It can also be an array of primitives. A metadata value
              cannot be an object.

              Each key in the `DocumentBody` must be unique. The model attributes (`CompressedBinaryData`, `ParentId`,
              `Permissions`, etc.) are reserved keys. Keys are case-insensitive (i.e., the Push API considers
              `mykey`, `MyKey`, `myKey`, `MYKEY`, etc. as identical).
            name: "DocumentBody"
            in: "body"
        produces: 
          - "application/json"
        tags: 
          - "Item"
        x-pretty-name: "addUpdateDocument"
        operationId: "addUpdateDocument"
        summary: "Add or update single item"
        description: |
          Adds or updates a single item and/or its related permission sets in a Coveo Cloud V2 Push source.

          **Example request:**
          ```http
          PUT /v1/organizations/myorganizationid/sources/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/documents?documentId=http%3A%2F%2Fwww%2Eexample%2Ecom%2F
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```
          ```json
          {
            "Data:" "This text will be used to generate excerpts and a quickview."
            "mymeta1": "My value 1",
            "mymeta2": "My value 2",
            "Permissions": [
              {
                "PermissionSets": [
                  {
                    "AllowAnonymous": false,
                    "AllowedPermissions": {
                      "IdentityType": "USER",
                      "Identity": "allowed_user@example.com"
                    },
                    "DeniedPermissions": {
                      "IdentityType": "USER",
                      "Identity": "denied_user@example.com"
                    }
                  }
                ]
              }
            ]
          }
          ```

          ### Using This Method to Add or Update a Large Compressed Item

          In order to use this method to add or update a single large (5 MB and more) item in a Coveo Cloud V2 Push
          source, you need to perform the following steps:

          1. Get an access to a private, encrypted Amazon S3 file container using the
          [Get large file container](PushApi#operation/getPresignedUploadUrl) method.

          2. Send a `PUT` request to the `uploadUri` you got from step 1.

          Your request must contain the following headers:

          ```http
          Content-Type: application/octet-stream
          x-amz-server-side-encryption: AES256
          ```

          The body of your request must contain the compressed binary content of the item you wish to add or update.
          This content must be compressed using the inflate algorithm (zlib).

          3. Use this method to add or update the large item. You must indicate the `fileId` you got at step 1 in the
          `CompressedBinaryDataFileId` attribute of the body of your request, as in the following example:
          ```json
          {
            [ ... ]

            "CompressedBinaryDataFileId": "d22778ca-7f42-4e13-9d9a-47d01bce866c",

            [ ... ]
          }
          ```
        security: 
          - 
            oauth2: 
              - "full"
        consumes: 
          - "application/json"
      delete: 
        responses: 
          202:
            description: "Accepted"
            examples:
              application/json:
                {}
          400: 
            $ref: "#/responses/400"
          401:
            $ref: "#/responses/401"
          403:
            $ref: "#/responses/403"
          404:
            $ref: "#/responses/404"
          412:
            $ref: "#/responses/412"
          415:
            $ref: "#/responses/415"
          500:
            $ref: "#/responses/500"
          504:
            $ref: "#/responses/504"
        parameters: 
          - 
            $ref: "#/parameters/OptionalOrderingId"
          -
            type: "boolean"
            default: false
            description: |
              Whether to delete the children of the item.
            name: "deleteChildren"
            in: "query"
          -
            $ref: "#/parameters/SourceId"
          -
            $ref: "#/parameters/DocumentId"
          -
            $ref: "#/parameters/OrganizationId"
        tags: 
          - "Item"
        produces: 
          - "application/json"
        x-pretty-name: "deleteDocument"
        operationId: "deleteDocument"
        summary: "Delete item and its children"
        description: |
          Deletes a specific item, and optionally its children, from a Coveo Cloud V2 Push source.

          **Sample request:**
          ```http
          DELETE /v1/organizations/myorganizationid/sources/myorganizationid-veta6vcbq5onxgj5nsiiaske5e/documents?documentId=http%3A%2F%2Fwww%2Eexample%2Ecom%2F&deleteChildren=true
          Host: push.cloud.coveo.com
          Content-Type: application/json
          Authorization: Bearer MyOAuth2Token
          ```
        security: 
          - 
            oauth2: 
              - "full"
  schemes: 
    - "https"
  tags: 
    - 
      description: |
        Exposes a service to get access to a private, encrypted Amazon S3 file container.
      name: "File"
    - 
      description: |
        Exposes services to add, update, and/or delete items in a Coveo Cloud V2 Push source.
      name: "Item"
    - 
      description: |
        Exposes services to provision security identity providers in order to be able to resolve external system
        permissions and items.
      name: "Identity"
    - 
      description: |
        Exposes a service to modify the status of a Coveo Cloud V2 Push source, effectively creating source activitises.
      name: "Source"
  securityDefinitions: 
    oauth2: 
      scopes: 
        full: "Required"
      flow: "implicit"
      authorizationUrl: "https://platform.cloud.coveo.com/oauth/authorize"
      type: "oauth2"
  host: "push.cloud.coveo.com"
  basePath: "/v1"
  definitions:
    MappedIdentity: 
      type: "object"
      properties: 
        AdditionalInfo: 
          additionalProperties: "string"
          type: "object"
          description: |
            An object which can contain any additional information you wish to provide about the identity in the form of
            key-value pairs.

            **Sample value:**
            ```json
            {
              "key1" : "value 1",
              "key2" : "value 2"
            }
            ```
        Type: 
          enum: 
            - "UNKNOWN"
            - "USER"
            - "GROUP"
            - "VIRTUAL_GROUP"
          type: "string"
          description: |
            The type of the identity.

            **Sample value:**
            > `"USER"`
        Name: 
          type: "string"
          description: |
            The name of the identity.

            **Sample value:**
            > `"user1@example.com"`
        Provider: 
          type: "string"
          description: |
            The security identity provider which contains the identity.

            **Sample value:**
            > `"Email Security Provider"`
    GatewayTimeoutError: 
      type: "object"
      properties: 
        message: 
          type: "string"
    IdentityBody: 
      type: "object"
      properties: 
        WellKnowns: 
          items: 
            $ref: "#/definitions/Identity"
          type: "array"
          description: |
            The list of security identity roles which the identity belongs to.
          example:
            -
              AdditionalInfo: {}
              Type: "GROUP"
              Name: "Everyone"
        Members: 
          items: 
            $ref: "#/definitions/Identity"
          type: "array"
          description: |
            The list of identities which are part of the identity (assuming the identity is a group).
          example:
            -
              AdditionalInfo: {}
              Type: "USER"
              Name: "alice@mydomain.com"
            -
              AdditionalInfo: {}
              Type: "USER"
              Name: "bob@mydomain.com"
        Identity: 
          $ref: "#/definitions/Identity"
    DocumentBody: 
      type: "object"
      properties: 
        CompressedBinaryData: 
          type: "string"
          format: "byte"
          description: |
            The original binary item content, compressed using the deflate (zlib) algorithm.

            You can use this parameter when you are pushing a compressed binary item (such as XML/HTML, PDF, Word, or
            binary) whose size is less than 5 MB.

            Whenever you are pushing an item whose size is 5 MB or more, use the `CompressedBinaryDataFileId` property
            instead.

            If you are pushing less than 5 MB of textual (non-binary) content, you can use the `Data` property instead.

            **Sample value:**
            > `"eJxzrUjMLchJBQAK4ALN"`
          example: "eJxzrUjMLchJBQAK4ALN"
        CompressedBinaryDataFileId: 
          type: "string"
          description: |
            The Amazon S3 key which uniquely identifies the file container where the original compressed binary item
            content has been uploaded.

            You can get this key using the [Get large file container](PushApi#operation/getPresignedUploadUrl) method.

            Whenever you are pushing compressed binary items (such as XML/HTML, PDF, Word, or binary) whose size is
            5 MB and over, you should use this property rather than `CompressedBinaryData`.

            If you are pushing less than 5 MB of textual (non-binary) content, you can use the `Data` property instead.

            **Sample value:**
            > `"d22778ca-7f42-4e13-9d9a-47d01bce866c"`
          example: "d22778ca-7f42-4e13-9d9a-47d01bce866c"
        ParentId: 
          type: "string"
          description: |
            The unique identifier (URI) of the parent item. Specifying a value for this key creates a relationship
            between the attachment item (child) and its parent item. This value also ensures that a parent and all of
            its attachments will be routed in the same index slice.

            **Note:**
            > The Push API only allows one level of attachment per item (i.e., the Push API does not support attachments
            > within attachments).

            **Sample value:**
            > `"http://www.example.com/"`
          example: "http://www.example.com/"
        FileExtension: 
          type: "string"
          pattern: \.[a-z-A-Z0-9]+
          description: |
            The file extension of the data you are pushing. This is useful when pushing a compressed item. The converter
            uses this information to identify how to correctly process the item.

            **Sample value:**
            > `".html"`
          example: ".html"
        Data: 
          type: "string"
          description: |
            The textual (non-binary) content of the item.

            Whenever you are pushing a compressed binary item (such as XML/HTML, PDF, Word, or binary), you should use
            the `CompressedBinaryData` or `CompressedBinaryDataFileId` attribute instead, depending on the content size.

            **Sample value:**
            > `"This domain is established to be used for illustrative examples in documents. You may use this domain
            > in examples without prior coordination or asking for permission."`
          example: |
            This domain is established to be used for illustrative examples in documents. You may use this domain in
            examples without prior coordination or asking for permission."
        Permissions: 
          items: 
            $ref: "#/definitions/PermissionsSets"
          type: "array"
          description: |
            The list of permission sets for this item.

            This is useful when item based security is required (i.e., when security is not configured at the source
            level).
      example:
        language: "English"
        title: "Example Domain"
        author: "Anonymous"
        size: 1345
        date: "1999-01-01 00:00:01"
        indexeddate: "2017-06-19 15:44:32"
        CompressedBinaryData: "eJyNVE1v2zAMvedXcN5lA6I43dYtSOxgQztgl60D1ktPhWrRMVFL8iQ5Hxj630fLbuqsPSwBLImUHh8fKWWvLq8urm9+foUq6Ho9yboBilp6nycbd3uLe6mbGm8Lq5POjVKtJ8C/LFCocf2198Ol1ZJMlvbWfofGIKGopPMY8qQNpVgkY1cVQiPwd0vbPLmwJqAJIhwaTKDoV3kScB/SjtPqCPQcx0iNebIl3DXWhdHpHalQ5Qq3VKCIiymQoUCyFr6QNeZnj0A+HDiLLvoQtPB+8N1ZdYA/cRqXsrjfONsaJQpbW7eE1+Wc/+9Wxy1aug2ZJcyfTI1UiszmxFYyT1FKTfVhCclVgwZ+SeOTKSTfsN5ioELCD2yRLUfDFL445j8Fz1uFR0flasCLwA/xq2g7ohxTX8LH+bzZP2d5jhpkG+wLZM9PDryUeVmO/NYpdMJJRa1fwhnq1YiSXNZk7qc8bslTQDUi+Aj3fvFhsRghdpUQCgvrZCDLXI01OAb9rFGRhDda7sWQ5acuy7fjgp3W738yeTjOToUciXmq2EnVX/D9I8381HvU+yjZE4n+m6WxQdfdfJKl/TWcZDE1JYMUGycK4UVtpULFLey4a/i+Mv2hwauzZ3eVTb2vWV9X5EFFO/AMfZB3NfmKqxQs3CG0nqeldUB13frQ1WOLMLwOnm8Vny5azdfOz+DGtqzGoTsEgZH7lhzQzdOpHYXKtgEaR4xcWBaJTKw08Fr6exYlBm3QafKeHbMsbY6sM35DHJZ50r0kyzTd7XYzkkbOrNukfTyfDtGS9XfrkMMzno4xZjMGk+sImKVRqSztFO3G+Bz+BVJmg7o="
        FileExtension: ".html"
        Permissions:
          -
            PermissionSets:
              -
                AllowedAnonymous: false
                AllowedPermissions:
                  -
                    IdentityType: "USER"
                    Identity: "alice@mydomain.com"
                DeniedPermissions:
                  -
                    IdentityType: "USER"
                    Identity: "bob@mydomain.com"
    BaseIdentityBody: 
      type: "object"
      properties: 
        Identity: 
          $ref: "#/definitions/Identity"
    Empty: 
      type: "object"
    Error: 
      type: "object"
      properties: 
        errorCode: 
          type: "string"
          description: |
            The name of the error.
        message: 
          type: "string"
          description: |
            A verbose description of the error.
    PermissionsSets: 
      type: "object"
      properties: 
        DeniedPermissions: 
          type: "object"
          properties: 
            IdentityType: 
              type: "string"
            Identity: 
              type: "string"
        AllowedPermissions: 
          type: "object"
          properties: 
            IdentityType: 
              type: "string"
            Identity: 
              type: "string"
    PostFileResponse:
      schema: 
        $ref: "#/definitions/PresignedUploadUrl"
    PresignedUploadUrl: 
      type: "object"
      properties: 
        uploadUri: 
          type: "string"
          description: |
            The presigned URI of a private, encrypted Amazon S3 file container.
          example: "https://s3.amazonaws.com/coveo-nprod-customerdata/proda/blobstore/myorganizationid/d22778ca-7f42-4e13-9d9a-47d01bce866c?x-amz-security-token=FQoDYXdzEI%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaDIjo2u%2B1zW%2Bn2D5hdCLlAUH6gI%2F%2B8fdqvqMdlejMMILOW7s%2FYsmIVP1csTIlCnw7r%2BcdMLR0GALqVuY8DBu8W106jnUyVPTNOkkWTEdcoyDgZU1JKiA%2B7bYzhm6VqXORv%2BcPqstioPnD5Sot68lX5Ty2MqVlQPxh%2FJdZ9mzWZ6C930IO%2Blp84%2FgpcDXp4vHZMh0XaSr65FEZdGSU%2BDB11UHeXUjzsrF0WBdM1ZReroJXfZtGWnrvKuTniEDg9jzlZ8VJGB%2BZTxrcdIPlFLlTMAtqnXgICfuL9aLz1IOcoYchwX9BeltR29MZJIi9sLhg%2FBF%2Fufwo2dqkygU%3D&AWSAccessKeyId=ASIAIANPNTSDZY6CNTTA&Expires=1497978313&Signature=gozB0YevJmDxaG0LE6j%2FNvUrfvA%3D"
        fileId: 
          type: "string"
          description: |
            The unique identifier of the encrypted Amazon S3 file container.
          example: "d22778ca-7f42-4e13-9d9a-47d01bce866c"
    MappedIdentityBody: 
      type: "object"
      properties: 
        WellKnowns: 
          items: 
            $ref: "#/definitions/Identity"
          type: "array"
          description: |
            The list of security identity roles which this identity belongs to.
        Mappings: 
          items: 
            $ref: "#/definitions/MappedIdentity"
          type: "array"
          description: |
            The list of identities to map this identity with.
        Identity: 
          $ref: "#/definitions/Identity"
    Identity: 
      type: "object"
      properties: 
        AdditionalInfo: 
          additionalProperties: "string"
          type: "object"
          description: |
            An object which can contain any additional information you wish to provide about the identity in the form of
            key-value pairs.

            **Sample value:**
            > ```json
            > {
            >   "key1" : "value 1",
            >   "key2" : "value 2"
            > }
            > ```
          example:
            key: "value"
        Type: 
          enum: 
            - "UNKNOWN"
            - "USER"
            - "GROUP"
            - "VIRTUAL_GROUP"
          type: "string"
          description: |
            The type of the identity.

            **Sample value:**
            > `"USER"`
          example: "GROUP"
        Name: 
          type: "string"
          description: |
            The name of the identity. This name needs to be unique across the entire system.

            **Sample value:**
            > `"user1@example.com"`
          example: "user1@example.com"
      description: |
        The identity.
      example:
        AdditionalInfo: {}
        Type: "GROUP"
        Name: "Sales_Representatives"
  parameters:
    OptionalOrderingId:
      required: false
      type: "string"
      description: |
        A value that can be parsed to a 64-bit unsigned integer. This will be used by the Coveo Cloud V2 index to ensure
        that operations are applied in the order they were received. By default, a timestamped ordering value is added.
        This is important in cases where several changes for a given item are pushed in a short period of time. The
        index will process the multiple changes for this item to ensure that the index contains the latest changes.

        Specifying an `orderingId` value is only useful when you are cancelling unprocessed pushes with an `orderingId`
        value lower than a given value.

        **Sample value:**
        > `"1497448742564"`
      name: "orderingId"
      in: "query"
    DocumentId:
      required: true
      type: "string"
      description: |
        The unique identifier of the item. Must be the item URI.

        **Sample value:**
        > `"http://www.example.com/"`
      name: "documentId"
      in: "query"
    ProviderId:
      required: true
      type: "string"
      description: |
        The unique identifier of the Coveo Cloud V2 security identity provider.

        **Sample value:**
        > `"MyPushSourceSecurityIdentitiyProvider"`
      name: "providerId"
      in: "path"
    FileId:
      required: false
      type: "string"
      description: |
        The unique identifier of the file.

        You can get this using the [Get large file container](PushApi#operation/getPresignedUploadUrl) method.

        **Sample value:**
        > `"d22778ca-7f42-4e13-9d9a-47d01bce866c"`
      name: "fileId"
      in: "query"
    OrganizationId:
      required: true
      type: "string"
      description: |
        The unique identifier of the Coveo Cloud V2 organization.

        **Sample value:**
        > `"myorganizationid"`
      name: "organizationId"
      in: "path"
    SourceId:
      required: true
      type: "string"
      description: |
        The unique identifier of the Coveo Cloud V2 Push source.

        **Sample value:**
        > `"myorganizationid-veta6vcbq5onxgj5nsiiaske5e"`
      name: "sourceId"
      in: "path"
  responses:
    400:
      description: "Bad Request"
      schema:
        $ref: "#/definitions/Error"
      examples:
        application/json:
          errorCode: "INVALID_JSON"
          message: "Invalid JSON."
    401:
      description: "Unauthorized"
      schema:
        $ref: "#/definitions/Error"
      examples:
        application/json:
          errorCode: "INVALID_TOKEN"
          message: "Token is invalid."
    403:
      description: "Forbidden"
      schema:
        $ref: "#/definitions/Error"
      examples:
        application/json:
          message: "Forbidden"
    404:
      description: "Not found"
      schema:
        $ref: "#/definitions/Error"
      examples:
        application/json:
          errorCode: "ORGANIZATION_NOT_FOUND"
          message: "Organization 'myorganizationid' does not exist."
    412:
      description: "Precondition Failed"
      schema:
        $ref: "#/definitions/Error"
      examples:
        application/json:
          errorCode: "MISSING_PARAMETER"
          message: "Parameter 'documentBody' is missing."
    415:
      description: "Unsupported Media Type"
      schema:
        $ref: "#/definitions/Error"
    429:
      description: "Too Many Requests"
      schema:
        $ref: "#/definitions/Error"
    500:
      description: "Internal Server Error"
      schema:
        $ref: "#/definitions/Error"
      examples:
        application/json:
          errorCode: "INTERNAL_SERVER_ERROR"
          message: "Failed to process request due to an internal error."

    504:
      description: "Gateway Timeout"
      schema:
        $ref: "#/definitions/GatewayTimeoutError"
  swagger: "2.0"
